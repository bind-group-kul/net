% TUTORIAL_RESTING: Script that runs the resting state analysis pipeline.
%
% DESCRIPTION:
%     This tutorial is based on two blocks of 10 minutes of resting state eyes open recorded 
%     at the Montreal Neurological Institute in 2011 with a CTF MEG 275 system. 
%
% USAGE: 
%     1) Edit the 'tutorial_dir' path: Indicate the directory where you 
%        unzipped the file "sample_resting.zip"
%     2) Edit the 'bst_db_dir' path: Indicate the Brainstorm database directory
%     3) Run this script

% @=============================================================================
% This software is part of the Brainstorm software:
% http://neuroimage.usc.edu/brainstorm
% 
% Copyright (c)2000-2014 University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPL
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Author: Francois Tadel, 2013


%% ===== PREPARE THE DATABASE =====
% ===== TO EDIT =====
% Define the directory where the sample_resting.zip file has been unzipped
tutorial_dir = 'C:\Work\RawData\Tutorials\sample_resting';
% Define the directory where the Brainstorm directory has to be stored
bst_db_dir = 'C:\Work\Protocols';

% ===== FILES LOCATIONS =====
% Build the files name of the files to import
FsDir   = fullfile(tutorial_dir, 'Anatomy');
Run1File = fullfile(tutorial_dir, 'Data', 'subj002_spontaneous_20111102_01_AUX.ds');
Run2File = fullfile(tutorial_dir, 'Data', 'subj002_spontaneous_20111102_02_AUX.ds');
EventRun1File = fullfile(Run1File, 'events_BAD.mat');
EventRun2File = fullfile(Run2File, 'events_BAD.mat');
% Check if the folder contains the required files
if ~file_exist(FsDir)
    error(['Please edit this script and change ''tutorial_dir'' to the path where' 10 ...
           'you unzipped the file sample_raw.zip (downloaded from the website).']);
end

% ===== START BRAINSTORM =====
% Add brainstorm.m path to the path
addpath(fileparts(fileparts(fileparts(mfilename('fullpath')))));
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Define the directory where the brainstorm database is stored
bst_set('BrainstormDbDir', bst_db_dir);

% ===== DELETE PREVIOUS PROTOCOL =====
% Protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'TutorialResting';
% Removing existing protocol with the same name
isUserConfirm = 0;
isRemoveFiles = 1;
db_delete_protocol(ProtocolName, isUserConfirm, isRemoveFiles);
% Force to delete pre-existing folders
if file_exist(fullfile(bst_db_dir, ProtocolName))
    rmdir(fullfile(bst_db_dir, ProtocolName), 's');
end

% ===== CREATE NEW PROTOCOL =====
% Get default structure for protocol description
sProtocol = db_template('ProtocolInfo');
% Fill with the properties we want to use
sProtocol.Comment  = ProtocolName;
sProtocol.SUBJECTS = fullfile(bst_db_dir, ProtocolName, 'anat');
sProtocol.STUDIES  = fullfile(bst_db_dir, ProtocolName, 'data');
sProtocol.UseDefaultAnat = 0;
sProtocol.UseDefaultChannel = 0;
% Add the protocol to Brainstorm database
iProtocol = db_edit_protocol('create', sProtocol);
% If an error occured in protocol creation (protocol already exists, impossible to create folders...)
if (iProtocol <= 0)
    error('Could not create protocol.');
end
% Set new protocol as current protocol
gui_brainstorm('SetCurrentProtocol', iProtocol);
% Set default anatomy
sColin = bst_get('AnatomyDefaults', 'Colin27');
db_set_template(0, sColin, 0);



%% ===== IMPORT TO DATABASE =====
% Start a new report
bst_report('Start', []);

% Process: Import FreeSurfer folder
sFiles = bst_process(...
    'CallProcess', 'process_import_freesurfer', ...
    [], [], ...
    'subjectname', 'Subject02', ...
    'mrifile', {FsDir, 'FsDir'}, ...
    ... 'nvertices', 15000, ...
    'nvertices', 3000, ...
    'nas', [128, 225, 142], ...
    'lpa', [52, 123, 100], ...
    'rpa', [203, 127, 95], ...
    'ac', [132, 138, 153], ...
    'pc', [132, 109, 150], ...
    'ih', [134, 113, 217]);

% Process: Create link to raw files
sFilesRun1 = bst_process(...
    'CallProcess', 'process_import_data_raw', ...
    sFiles, [], ...
    'subjectname', 'Subject02', ...
    'datafile', {Run1File, 'CTF'}, ...
    'channelalign', 1);
sFilesRun2 = bst_process(...
    'CallProcess', 'process_import_data_raw', ...
    sFiles, [], ...
    'subjectname', 'Subject02', ...
    'datafile', {Run2File, 'CTF'}, ...
    'channelalign', 1);
sFiles = [sFilesRun1, sFilesRun2];


%% ===== CLEAN RECORDINGS =====
% Process: Sinusoid removal: 60Hz 120Hz 180Hz 240Hz 300Hz
sFiles = bst_process(...
    'CallProcess', 'process_sin_remove', ...
    sFiles, [], ...
    'freqlist', [60, 120, 180, 240, 300], ...
    'sensortypes', 'MEG', ...
    'reverse', 1);

% Process: Detect heartbeats
bst_process(...
    'CallProcess', 'process_evt_detect_ecg', ...
    sFiles, [], ...
    'channelname', 'EEG057', ...
    'timewindow', [0, 599.9995833], ...
    'eventname', 'cardiac');

% Process: Detect eye blinks
bst_process(...
    'CallProcess', 'process_evt_detect_eog', ...
    sFiles, [], ...
    'channelname', 'EEG058', ...
    'timewindow', [0, 599.9995833], ...
    'eventname', 'blink');

% Process: SSP EOG: blink
bst_process(...
    'CallProcess', 'process_ssp_eog', ...
    sFiles, [], ...
    'eventname', 'blink', ...
    'sensortypes', 'MEG');

% Process: SSP ECG: cardiac
bst_process(...
    'CallProcess', 'process_ssp_ecg', ...
    sFiles, [], ...
    'eventname', 'cardiac', ...
    'sensortypes', 'MEG');

% Run1: Force the first cardiac component selected (off the pipeline editor)
DataFile1 = file_fullpath(sFiles(1).FileName);
DataMat = load(DataFile1, 'F');
DataMat.F.channelmat.Projector(2).Status = 1;
DataMat.F.channelmat.Projector(2).CompMask(1) = 1;
bst_save(DataFile1, DataMat, 'v6', 1);
% Run2: Force the first cardiac component selected (off the pipeline editor)
DataFile2 = file_fullpath(sFiles(2).FileName);
DataMat = load(DataFile2, 'F');
DataMat.F.channelmat.Projector(2).Status = 1;
DataMat.F.channelmat.Projector(2).CompMask(1) = 1;
bst_save(DataFile2, DataMat, 'v6', 1);

% Process: Events: Import from file
bst_process(...
    'CallProcess', 'process_evt_import', ...
    sFiles(1), [], ...
    'evtfile', {EventRun1File, 'BST'});
bst_process(...
    'CallProcess', 'process_evt_import', ...
    sFiles(2), [], ...
    'evtfile', {EventRun2File, 'BST'});


%% ===== SOURCE ESTIMATION =====
% Process: Compute head model
bst_process(...
    'CallProcess', 'process_headmodel', ...
    sFiles, [], ...
    'sourcespace', 1, ...
    'meg', 3, ...  % Overlapping spheres
    'eeg', 1, ...  % <none>
    'ecog', 1, ...  % <none>
    'seeg', 1, ...  % <none>
    'openmeeg', []);

% Process: Compute noise covariance (Run1)
bst_process(...
    'CallProcess', 'process_noisecov', ...
    sFiles(1), [], ...
    'baseline', [0, 599.9995833], ...
    'dcoffset', 1, ...
    'method', 1, ...  % Full noise covariance matrix
    'copycond', 0, ...
    'copysubj', 0);
% Process: Compute noise covariance (Run2)
bst_process(...
    'CallProcess', 'process_noisecov', ...
    sFiles(2), [], ...
    'baseline', [0, 599.9995833], ...
    'dcoffset', 1, ...
    'method', 1, ...  % Full noise covariance matrix
    'copycond', 0, ...
    'copysubj', 0);

% Process: Compute sources
sFiles = bst_process(...
    'CallProcess', 'process_inverse', ...
    sFiles, [], ...
    'method', 1, ...  % Minimum norm estimates (wMNE)
    'wmne', struct(...
         'NoiseCov', [], ...
         'InverseMethod', 'wmne', ...
         'ChannelTypes', {{}}, ...
         'SNR', 3, ...
         'diagnoise', 0, ...
         'SourceOrient', {{'fixed'}}, ...
         'loose', 0.2, ...
         'depth', 1, ...
         'weightexp', 0.5, ...
         'weightlimit', 10, ...
         'regnoise', 1, ...
         'magreg', 0.1, ...
         'gradreg', 0.1, ...
         'eegreg', 0.1, ...
         'ecogreg', 0.1, ...
         'seegreg', 0.1, ...
         'fMRI', [], ...
         'fMRIthresh', [], ...
         'fMRIoff', 0.1, ...
         'pca', 1), ...
    'sensortypes', 'MEG, MEG MAG, MEG GRAD, EEG', ...
    'output', 1);  % Kernel only: shared


%% ===== RESTING STATE PIPELINE =====
% Process: Phase-amplitude coupling
sFilesPAC = bst_process(...
    'CallProcess', 'process_pac', ...
    sFiles, [], ...
    'timewindow',     [0, 599.9996], ...
    'nesting',        [2, 48], ...
    'nested',         [80, 150], ...
    'target_res',     '', ...
    'max_block_size', 10, ...
    'filter_sensor',  0, ...
    'avgoutput',      0, ...
    'savefull',       0);

% Process: megPAC (FileB=MaxPAC)
sFilesMegPAC = bst_process(...
    'CallProcess', 'process_rs_megpac2', ...
    sFiles, sFilesPAC, ...
    'timewindow', [0, 599.9995833], ...
    'max_block_size', 10, ...
    'method', 1);  % megPAC

% Process: Resting state pipeline
sFilesModes = bst_process(...
    'CallProcess', 'process_rs', ...
    sFilesMegPAC, [], ...
    'savecorr', 0);

% Process: Canolty maps (FileB=MaxPAC)
sFilesCanolty = bst_process(...
    'CallProcess', 'process_canoltymap2', ...
    sFiles, sFilesPAC, ...
    'timewindow', [0, 599.9995833], ...
    'epochtime', [-1, 1], ...
    'target_res', '15', ...
    'max_block_size', 100);

% Save and display report
ReportFile = bst_report('Save', sFiles);
bst_report('Open', ReportFile);





