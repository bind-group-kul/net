% TUTORIAL_RAW: Script that reproduces the results of the online tutorials "Processing continuous recordings".
%
% DESCRIPTION:
%     It is based on a median nerve stimulation experiment recorded at the Montreal Neurological Institute in 2011 
%     with a CTF MEG 275 system. The sample dataset contains 6 minutes of recordings at 1200Hz for one subject 
%     and includes 100 stimulations of each arm. 
%     In contains two parts:
%        1) Some Brainstorm calls to check for the existence of the input files and create a new protocol
%        2) The script generated automatically by Brainstorm to analyze this dataset, as on page:
%     http://neuroimage.usc.edu/brainstorm/Tutorials/TutRawScript
%
% USAGE: 
%     1) Edit the 'tutorial_dir' path: Indicate the directory where you 
%        unzipped the file "sample_raw.zip"
%     2) Edit the 'bst_db_dir' path: Indicate the Brainstorm database directory
%     3) Run this script

% @=============================================================================
% This software is part of the Brainstorm software:
% http://neuroimage.usc.edu/brainstorm
% 
% Copyright (c)2000-2014 University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPL
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Author: Francois Tadel, 2013


%% ===== PART I: PREPARE THE DATABASE =====
% ===== TO EDIT =====
% Define the directory where the sample_raw.zip file has been unzipped
tutorial_dir = 'C:\Work\RawData\Tutorials\sample_raw';
% Define the directory where the Brainstorm directory has to be stored
bst_db_dir = 'C:\Work\Protocols';

% ===== FILES LOCATIONS =====
% Build the files name of the files to import
AnatDir = fullfile(tutorial_dir, 'Anatomy');
RawFile = fullfile(tutorial_dir, 'Data', 'subj001_somatosensory_20111109_01_AUX-f.ds');
% Check if the folder contains the required files
if ~file_exist(AnatDir)
    error(['Please edit this script and change ''tutorial_dir'' to the path where' 10 ...
           'you unzipped the file sample_raw.zip (downloaded from the website).']);
end

% ===== START BRAINSTORM =====
% Add brainstorm.m path to the path
addpath(fileparts(fileparts(fileparts(mfilename('fullpath')))));
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Define the directory where the brainstorm database is stored
bst_set('BrainstormDbDir', bst_db_dir);

% ===== DELETE PREVIOUS PROTOCOL =====
% Protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'TutorialScript';
% Removing existing protocol with the same name
isUserConfirm = 0;
isRemoveFiles = 1;
db_delete_protocol(ProtocolName, isUserConfirm, isRemoveFiles);
% Force to delete pre-existing folders
if file_exist(fullfile(bst_db_dir, ProtocolName))
    rmdir(fullfile(bst_db_dir, ProtocolName), 's');
end

% ===== CREATE NEW PROTOCOL =====
% Get default structure for protocol description
sProtocol = db_template('ProtocolInfo');
% Fill with the properties we want to use
sProtocol.Comment  = ProtocolName;
sProtocol.SUBJECTS = fullfile(bst_db_dir, ProtocolName, 'anat');
sProtocol.STUDIES  = fullfile(bst_db_dir, ProtocolName, 'data');
sProtocol.UseDefaultAnat = 0;
sProtocol.UseDefaultChannel = 1;
% Add the protocol to Brainstorm database
iProtocol = db_edit_protocol('create', sProtocol);
% If an error occured in protocol creation (protocol already exists, impossible to create folders...)
if (iProtocol <= 0)
    error('Could not create protocol.');
end
% Set new protocol as current protocol
gui_brainstorm('SetCurrentProtocol', iProtocol);
% Set default anatomy
sColin = bst_get('AnatomyDefaults', 'Colin27');
db_set_template(0, sColin, 0);


%% ===== PART II: BRAINSTORM-GENERATED SCRIPT =====
% Script generated by Brainstorm v3.2 (25-Jan-2013)
% Input files
FileNamesA = [];
% Start a new report
bst_report('Start', FileNamesA);

% Process: Import anatomy folder
sFiles = bst_process(...
    'CallProcess', 'process_import_anatomy', ...
    FileNamesA, [], ...
    'subjectname', 'Subject01', ...
    'mrifile', {AnatDir, 'FreeSurfer'}, ...
    'nvertices', 15000, ...
    'nas', [127, 212, 123], ...
    'lpa', [55, 124, 119], ...
    'rpa', [200, 129, 114], ...
    'ac', [129, 137, 157], ...
    'pc', [129, 113, 157], ...
    'ih', [129, 118, 209]);

% Process: Create link to raw file
sFiles = bst_process(...
    'CallProcess', 'process_import_data_raw', ...
    sFiles, [], ...
    'subjectname', 'Subject01', ...
    'datafile', {RawFile, 'CTF'}, ...
    'channelalign', 1);

% Process: Sinusoid removal: 60Hz 120Hz 180Hz
sFiles = bst_process(...
    'CallProcess', 'process_sin_remove', ...
    sFiles, [], ...
    'freqlist', [60, 120, 180], ...
    'sensortypes', 'MEG, EEG', ...
    'reverse', 1);

% Process: Detect eye blinks
sFiles = bst_process(...
    'CallProcess', 'process_evt_detect_ecg', ...
    sFiles, [], ...
    'channelname', 'EEG057', ...
    'timewindow', [0, 359.9991667], ...
    'eventname', 'cardiac');

% Process: Detect eye blinks
sFiles = bst_process(...
    'CallProcess', 'process_evt_detect_eog', ...
    sFiles, [], ...
    'channelname', 'EEG058', ...
    'timewindow', [0, 359.9991667], ...
    'eventname', 'blink');

% Process: SSP EOG: blink
sFiles = bst_process(...
    'CallProcess', 'process_ssp_eog', ...
    sFiles, [], ...
    'eventname', 'blink', ...
    'sensortypes', 'MEG, MEG MAG, MEG GRAD');

% Process: Import MEG/EEG: Events
sFiles = bst_process(...
    'CallProcess', 'process_import_data_event', ...
    sFiles, [], ...
    'subjectname', 'Subject01', ...
    'condition', '', ...
    'eventname', 'left, right', ...
    'timewindow', [0, 359.9991667], ...
    'epochtime', [-0.1, 0.3], ...
    'createcond', 1, ...
    'ignoreshort', 1, ...
    'usectfcomp', 1, ...
    'usessp', 1, ...
    'freq', [], ...
    'baseline', [-0.100, -0.001]);

% Process: Add time offset: -4.20ms
sFiles = bst_process(...
    'CallProcess', 'process_timeoffset', ...
    sFiles, [], ...
    'offset', -0.0042, ...
    'overwrite', 1);

% Process: Compute noise covariance
sFiles = bst_process(...
    'CallProcess', 'process_noisecov', ...
    sFiles, [], ...
    'baseline', [-0.1042, -0.005], ...
    'dcoffset', 1, ...
    'method', 1, ...  % Full noise covariance matrix
    'copycond', 0, ...
    'copysubj', 0);

% Process: Average: By condition (subject average)
sFiles = bst_process(...
    'CallProcess', 'process_average', ...
    sFiles, [], ...
    'avgtype', 3);  % By condition (subject average)

% Process: Snapshot: Sensors/MRI registration
sFiles = bst_process(...
    'CallProcess', 'process_snapshot', ...
    sFiles, [], ...
    'target', 1, ...  % Sensors/MRI registration
    'modality', 1, ...  % MEG (All)
    'orient', 1, ...  % left
    'time', 0, ...
    'contact_time', [0, 0.1], ...
    'contact_nimage', 12, ...
    'comment', 'MEG/MRI Registration');

% Process: Snapshot: Recordings time series
sFiles = bst_process(...
    'CallProcess', 'process_snapshot', ...
    sFiles, [], ...
    'target', 5, ...  % Recordings time series
    'modality', 1, ...  % MEG (All)
    'orient', 1, ...  % left
    'time', 0, ...
    'contact_time', [0, 0.1], ...
    'contact_nimage', 12, ...
    'comment', 'MEG/MRI Registration');

% Process: Compute head model
sFiles = bst_process(...
    'CallProcess', 'process_headmodel', ...
    sFiles, [], ...
    'sourcespace', 1, ...
    'meg', 3, ...  % Overlapping spheres
    'eeg', 3, ...
    'openmeeg', struct(...
         'BemSelect', [0, 0, 1], ...
         'BemCond', [1, 0.0125, 1], ...
         'BemNames', {{'Scalp', 'Skull', 'Brain'}}, ...
         'BemFiles', {{}}, ...
         'isAdjoint', 0, ...
         'isAdaptative', 1, ...
         'isSplit', 0, ...
         'SplitLength', 4000));

% Process: Compute sources
sFiles = bst_process(...
    'CallProcess', 'process_inverse', ...
    sFiles, [], ...
    'method', 1, ...  % Minimum norm estimates (wMNE)
    'wmne', struct(...
         'NoiseCov', [], ...
         'InverseMethod', 'wmne', ...
         'SNR', 3, ...
         'diagnoise', 0, ...
         'SourceOrient', {{'fixed'}}, ...
         'loose', 0.2, ...
         'depth', 1, ...
         'weightexp', 0.5, ...
         'weightlimit', 10, ...
         'regnoise', 1, ...
         'magreg', 0.1, ...
         'gradreg', 0.1, ...
         'eegreg', 0.1, ...
         'fMRI', [], ...
         'fMRIthresh', [], ...
         'fMRIoff', 0.1, ...
         'pca', 1), ...
    'sensortypes', 'MEG, MEG MAG, MEG GRAD, EEG', ...
    'output', 1);  % Kernel only: shared

% Save and display report
ReportFile = bst_report('Save', sFiles);
bst_report('Open', ReportFile);



