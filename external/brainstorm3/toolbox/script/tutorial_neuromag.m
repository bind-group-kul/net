% TUTORIAL_NEUROMAG: Script that follows Brainstorm online tutorial 
% "Neuromag raw recordings"
%
% USAGE: 
%     1) Edit the 'tutorial_dir' path: Indicate the directory where you 
%        unzipped the file "sample_neuromag.zip"
%     2) Edit the 'bst_db_dir' path: Indicate the Brainstorm database directory
%     3) Run this script

% @=============================================================================
% This software is part of the Brainstorm software:
% http://neuroimage.usc.edu/brainstorm
% 
% Copyright (c)2000-2014 University of Southern California & McGill University
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPL
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Author: Francois Tadel, 2010-2013

%% ===== TO EDIT =====
% Define the directory where the sample_neuromag.zip file has been unzipped
tutorial_dir = 'C:\Work\RawData\Tutorials\sample_neuromag';
% Define the directory where the Brainstorm directory has to be stored
bst_db_dir = 'C:\Work\Protocols';

%% ===== FILES LOCATIONS =====
% Build the files name of the FreeSurfer folder to import
FsDir = fullfile(tutorial_dir, 'anatomy');
% Check if the folder contains the required files
if ~file_exist(FsDir)
    error(['Please edit this script and change ''tutorial_dir'' to the path where' 10 ...
           'you unzipped the file sample_neuromag.zip (downloaded from the website).']);
end

%% ===== START BRAINSTORM =====
% Add brainstorm.m path to the path
addpath(fileparts(fileparts(fileparts(mfilename('fullpath')))));
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Define the directory where the brainstorm database is stored
bst_set('BrainstormDbDir', bst_db_dir);


%% ===== CREATE PROTOCOL =====
% Protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'TutorialNeuromag';
% Removing existing protocol with the same name
isUserConfirm = 0;
isRemoveFiles = 1;
db_delete_protocol(ProtocolName, isUserConfirm, isRemoveFiles);
% Force to delete pre-existing folders
if file_exist(fullfile(bst_db_dir, ProtocolName))
    rmdir(fullfile(bst_db_dir, ProtocolName), 's');
end

% Get default structure for protocol description
sProtocol = db_template('ProtocolInfo');
% Fill with the properties we want to use
sProtocol.Comment  = ProtocolName;
sProtocol.SUBJECTS = fullfile(bst_db_dir, ProtocolName, 'anat');
sProtocol.STUDIES  = fullfile(bst_db_dir, ProtocolName, 'data');
sProtocol.UseDefaultAnat = 0;
sProtocol.UseDefaultChannel = 1;
% Add the protocol to Brainstorm database
iProtocol = db_edit_protocol('create', sProtocol);
% If an error occured in protocol creation (protocol already exists, impossible to create folders...)
if (iProtocol <= 0)
    error('Could not create protocol.');
end
% Set new protocol as current protocol
gui_brainstorm('SetCurrentProtocol', iProtocol);


%% ===== IMPORT ANATOMY FILES =====
% This section was generated using the pipeline editor interface
SubjectName = 'Subject01';
% Start a new report
bst_report('Start', []);

% Process: Import FreeSurfer folder
bst_process(...
    'CallProcess', 'process_import_freesurfer', [], [], ...
    'subjectname', 'Subject01', ...
    'mrifile',     {'C:\Work\RawData\Tutorials\sample_neuromag\anatomy', 'FsDir'}, ...
    'nvertices',   15000, ...
    'nas',         [130 232 127], ...
    'lpa',         [47 136 74], ...
    'rpa',         [203 128 67], ...
    'ac',          [128 142 119], ...
    'pc',          [126 117 110], ...
    'ih',          [130 149 171]);

% === DISPLAY IMPORTED FILES ===
% Get subject again (updated structure)
sSubject = bst_get('Subject', SubjectName);
% Display all layers
hFigSurf = view_surface(sSubject.Surface(sSubject.iScalp).FileName, .7);                       % Scalp
view_surface(sSubject.Surface(sSubject.iCortex).FileName,     .5, [],         hFigSurf);       % Cortex
% Set left view
figure_3d('SetStandardView', hFigSurf, 'left');
% Pause and close figure
pause(1);
close(hFigSurf);


%% ===== LINK RECORDINGS TO DATABASE =====
% Process: Create link to raw file
sFileRaw = bst_process(...
    'CallProcess', 'process_import_data_raw', [], [], ...
    'datafile', {FifFile, 'FIF'}, ...
    'subjectname', 'Subject01', ...
    'channelalign', 1);

%% ===== CLEANING ECG/EOG =====
% Process: Detect heartbeats
sFileRaw = bst_process(...
    'CallProcess', 'process_evt_detect_ecg', ...
    sFileRaw, [], ...
    'channelname', 'ECG 063', ...
    'timewindow', [27.798758, 1107.978505]);
% Process: Detect eye blinks
sFileRaw = bst_process(...
    'CallProcess', 'process_evt_detect_eog', ...
    sFileRaw, [], ...
    'channelname', 'EOG 062', ...
    'timewindow', [27.798758, 1107.978505]);
% Process: SSP ECG: cardiac
sFileRaw = bst_process(...
    'CallProcess', 'process_ssp_ecg', ...
    sFileRaw, [], ...
    'eventname', 'cardiac', ...
    'sensortypes', 'MEG');
% Process: SSP EOG: blink
sFileRaw = bst_process(...
    'CallProcess', 'process_ssp_eog', ...
    sFileRaw, [], ...
    'eventname', 'blink', ...
    'sensortypes', 'MEG');


%% ===== IMPORT TO DATABASE =====
% Process: Events: Read from channel
sFileRaw = bst_process(...
    'CallProcess', 'process_evt_read', ...
    sFileRaw, [], ...
    'stimchan', 'STI 001; STI 002', ...
    'trackmode', 1);
% Process: Import MEG/EEG: Events (RIGHT)
sFilesRight = bst_process(...
    'CallProcess', 'process_import_data_event', ...
    sFileRaw, [], ...
    'subjectname', 'Subject01', ...
    'condition', 'Right', ...
    'eventname', 'STI 001: 5', ...
    'timewindow', [27.798758, 300], ...
    'epochtime', {[-0.100, 0.300], 'ms'}, ...
    'createcond', 0, ...
    'ignoreshort', 1, ...
    'usectfcomp', 1, ...
    'usessp', 1, ...
    'baseline', [-0.100, -0.002], ...
    'freq', []);
% Process: Import MEG/EEG: Events (LEFT)
sFilesLeft = bst_process(...
    'CallProcess', 'process_import_data_event', ...
    sFileRaw, [], ...
    'subjectname', 'Subject01', ...
    'condition', 'Left', ...
    'eventname', 'STI 002: 5', ...
    'timewindow', [27.798758, 300], ...
    'epochtime', {[-0.100, 0.300], 'ms'}, ...
    'createcond', 0, ...
    'ignoreshort', 1, ...
    'usectfcomp', 1, ...
    'usessp', 1, ...
    'baseline', [-0.100, -0.002], ...
    'freq', []);
% List of all files
sFiles = cat(2, sFilesLeft, sFilesRight);


%% ===== AVERAGE =====
% Process: Compute noise covariance
sFiles = bst_process(...
    'CallProcess', 'process_noisecov', ...
    sFiles, [], ...
    'baseline', [-0.1001, -0.0003], ...
    'dcoffset', 1, ...
    'method', 1, ...
    'copycond', 0, ...
    'copysubj', 0);
% Process: Average: By condition
sFilesAvg = bst_process(...
    'CallProcess', 'process_average', ...
    sFiles, [], ...
    'avgtype', 3);


%% ===== CLEAN =====
% Process: Cut stimulation artifact: [0ms,4ms]
sFilesAvg = bst_process(...
    'CallProcess', 'process_cutstim', ...
    sFilesAvg, [], ...
    'timewindow', [-0.0003, 0.0042], ...
    'sensortypes', 'MEG, EEG', ...
    'overwrite', 1);
% Process: Low-pass:120Hz
sFilesAvg = bst_process(...
    'CallProcess', 'process_bandpass', ...
    sFilesAvg, [], ...
    'highpass', 0, ...
    'lowpass', 120, ...
    'mirror', 1, ...
    'sensortypes', 'MEG, EEG', ...
    'overwrite', 1);


%% ===== SOURCE ESTIMATION =====
% Process: Compute head model
sFilesAvg = bst_process(...
    'CallProcess', 'process_headmodel', ...
    sFilesAvg, [], ...
    'sourcespace', 1, ...
    'meg', {3, {'<none>', 'Single sphere', 'Overlapping spheres', 'OpenMEEG BEM'}}, ...
    'eeg', {3, {'<none>', '3-shell sphere', 'OpenMEEG BEM'}}, ...
    'openmeeg', struct(...
         'BemSelect', [0, 0, 1], ...
         'BemCond', [1, 0.0125, 1], ...
         'BemNames', {{'Scalp', 'Skull', 'Brain'}}, ...
         'BemFiles', {{}}, ...
         'isAdjoint', 0, ...
         'isAdaptative', 1, ...
         'isSplit', 0, ...
         'SplitLength', 4000));
% Process: Compute sources
sFilesRes = bst_process(...
    'CallProcess', 'process_inverse', ...
    sFilesAvg, [], ...
    'method', 1, ...
    'wmne', struct(...
         'NoiseCov', [], ...
         'InverseMethod', 'wmne', ...
         'SNR', 3, ...
         'diagnoise', 0, ...
         'SourceOrient', {{'fixed'}}, ...
         'loose', 0.2, ...
         'depth', 1, ...
         'weightexp', 0.5, ...
         'weightlimit', 10, ...
         'regnoise', 1, ...
         'magreg', 0.1, ...
         'gradreg', 0.1, ...
         'eegreg', 0.1, ...
         'fMRI', [], ...
         'fMRIthresh', [], ...
         'fMRIoff', 0.1, ...
         'pca', 1), ...
    'sensortypes', 'MEG MAG, MEG GRAD', ...
    'output', 1);


%% ===== REPORT =====
% Look for the results file that contain links to data files with the tag "average"
iAvgRes = find(~cellfun(@(c)isempty(strfind(c, '_average')), {sFilesRes.FileName}));

% Add a few screen captures to the report, for quality control
% Projectors topographies
bst_report('Snapshot', 'ssp', sFileRaw(1).FileName, 'Removed artifacts: 1)Cardiac 2)Blink');
% Alignment Polhemus head points / MRI head surface / MEG helmet
bst_report('Snapshot', 'registration', sFilesAvg(1).FileName, 'After ICP registration (left view)', 'MEG', 'left');
bst_report('Snapshot', 'registration', sFilesAvg(1).FileName, 'After ICP registration (front view)', 'MEG', 'front');
% MEG sensors time series (butterfly view) for the two average files
bst_report('Snapshot', 'data', {sFilesAvg.FileName}, 'Evoked-response', 'MEG');
% MEG sensors topography (2DSensorCap) for the two average files
bst_report('Snapshot', 'topo', {sFilesAvg.FileName}, 'Evoked-response: 24ms', 'MEG', 0.024);
% Noise covariance as a matrix
bst_report('Snapshot', 'noisecov', sFilesAvg(1).FileName, 'Noise covariance matrix');
% Headmodel spheres (only useful for spherical models, to see the sphere that was computed automatically)
bst_report('Snapshot', 'headmodel', sFilesAvg(1).FileName, 'Best fitting sphere calculated automatically');
% Sources on cortex: one time, three orientations, amplitude threshold 35%
bst_report('Snapshot', 'sources', sFilesRes(iAvgRes(1)).FileName, 'First average: 24ms, threshold 35%', 0.024, .35, 'left');
bst_report('Snapshot', 'sources', sFilesRes(iAvgRes(1)).FileName, 'First average: 24ms, threshold 35%', 0.024, .35, 'top');
bst_report('Snapshot', 'sources', sFilesRes(iAvgRes(1)).FileName, 'First average: 24ms, threshold 35%', 0.024, .35, 'right');
% Sources on cortex: contact sheet: between [0,200]ms, 12 images
bst_report('Snapshot', 'sources', sFilesRes(iAvgRes(1)).FileName, 'First average: Contact sheet', [0,0.2,12], .35, 'top');

% Save and display report
ReportFile = bst_report('Save', sFilesRes);
bst_report('Open', ReportFile);


%% ===== DISPLAY RECORDINGS =====
% Keep only one for the example
AvgResFile  = sFilesRes(iAvgRes(1)).FileName;
[tmp, AvgDataFile] = file_resolve_link(AvgResFile);
% Display MEG sensors
hFigTs = view_timeseries(AvgDataFile, 'MEG');
% Set montage to "Left-temporal"
panel_montage('SetCurrentMontage', 'MEG', 'Left-temporal');
% Display all possible topography modes for the average: MAGNETOMATERS ONLY
hFigTp1 = view_topography(AvgDataFile, 'MEG MAG', '2DSensorCap');
hFigTp2 = view_topography(AvgDataFile, 'MEG MAG', '3DSensorCap');
hFigTp3 = view_topography(AvgDataFile, 'MEG MAG', '2DDisc');
hFigTp4 = view_topography(AvgDataFile, 'MEG MAG', '2DLayout');
% Pause and close all figures (unload all the loaded datasets)
pause(1);
bst_memory('UnloadAll', 'Forced');


%% ===== DISPLAY SOURCES =====
% View on the cortex surface
hFig1 = script_view_sources(AvgResFile, 'cortex');
% Set surface threshold to 35% of the maximal value
iSurf = 1;
panel_surface('SetDataThreshold', hFig1, iSurf, .35);
% Set current time to 24ms
panel_time('SetCurrentTime', 0.024);
% View sources on MRI (3D orthogonal slices)
hFig2 = script_view_sources(AvgResFile, 'mri3d');
panel_surface('SetDataThreshold', hFig2, iSurf, .35);
% View sources with MRI Viewer
hFig3 = script_view_sources(AvgResFile, 'mriviewer');
panel_surface('SetDataThreshold', hFig3, iSurf, .35);
% Pause and close all figures (unload all the loaded datasets)
pause(1);
bst_memory('UnloadAll', 'Forced');

% Re-open report...
bst_report('Open', ReportFile);


